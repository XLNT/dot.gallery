scalar DateTime
scalar Json

type Entity {
  id: ID!
  handle: String
  email: String!
  privateKey: String!
  publicKey: String!

  assets: [Asset!]!
  counterfactualTokens: [CounterfactualToken!]!
  placements: [Placement!]!

  createdAt: DateTime!
  updatedAt: DateTime!
}

type Asset {
  id: ID!
  uri: String!

  owner: Entity!

  createdAt: DateTime!
  updatedAt: DateTime!
}

type CounterfactualToken {
  id: ID!
  tokenURI: String!

  owner: Entity!
  placement: Placement!

  createdAt: DateTime!
  updatedAt: DateTime!
}

type Exhibition {
  id: ID!
  title: String!
  number: Int!
  theme: Json
  extent: Int!

  shows: [Show!]
  rooms: [Room!]

  createdAt: DateTime!
  updatedAt: DateTime!
}

type Show {
  id: ID!
  number: Int!
  opensAt: DateTime!
  closesAt: DateTime!

  exhibition: Exhibition!

  createdAt: DateTime!
  updatedAt: DateTime!
}

type Room {
  id: ID!
  entryId: ID!
  x: Int!
  y: Int!

  exhibition: Exhibition!
  placements: [Placement!]!
}

type Placement {
  id: ID!
  x: Int!
  y: Int!

  entity: Entity!
  room: Room!
  counterfactualToken: CounterfactualToken!

  createdAt: DateTime!
}

type Query {
  entity(id: ID!): Entity!
  currentExhibition: Exhibition
}

type Mutation  {
  loginAs(accessToken: String!, privateKey: String!): Entity!
  placeAsset(assetId: ID!, roomId: ID!, x: Int!, y: Int!): Placement
  createEntity: Entity!
  createAsset(ownerId: ID!, uri: String!): Asset!
}
