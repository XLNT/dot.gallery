scalar DateTime
scalar Json

type Entity {
  id: ID!
  handle: String
  email: String!

  assets: [Asset!]!
  tradableAssets: [Asset!]!
  placements: [Placement!]!
  tickets: [Ticket!]!
  availableTicket: Ticket

  createdAt: DateTime!
  updatedAt: DateTime!
}

type Asset {
  id: ID!
  domain: String!
  uri: Json!

  owner: Entity!
  placement: Placement

  createdAt: DateTime!
  updatedAt: DateTime!
}

type Ticket {
  id: ID!
  redeemed: Boolean!

  exhibition: Exhibition!

  createdAt: DateTime!
  updatedAt: DateTime!
}


type Exhibition {
  id: ID!
  title: String!
  number: Int!
  theme: Json
  extent: Int!

  shows: [Show!]
  rooms: [Room!]

  createdAt: DateTime!
  updatedAt: DateTime!

  # custom
  ticketsAvailable: Int!
  currentTicketPrice: Int!
}

type Show {
  id: ID!
  number: Int!
  opensAt: DateTime!
  closesAt: DateTime!

  exhibition: Exhibition!

  createdAt: DateTime!
  updatedAt: DateTime!
}

type Room {
  id: ID!
  entryId: ID!
  x: Int!
  y: Int!

  exhibition: Exhibition!
  placements: [Placement!]!
}

type Placement {
  id: ID!
  x: Int!
  y: Int!

  entity: Entity!
  room: Room!
  assets: [Asset!]!

  createdAt: DateTime!
}

type Query {
  currentEntity: Entity!
  currentExhibition: Exhibition
}

type Mutation  {
  loginAs(accessToken: String!): String!
  createPlacement(assetId: ID!, roomId: ID!, x: Int!, y: Int!): Placement
  redeemTicket: Ticket!
  awardWalk(image: String!): Asset!

  # Moderator Actions
  modIssueTicket(exhibitionId: ID!, email: String, id: String): Ticket
}
