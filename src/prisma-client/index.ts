// Code generated by Prisma (prisma@1.34.6). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  asset: (where?: AssetWhereInput) => Promise<boolean>;
  entity: (where?: EntityWhereInput) => Promise<boolean>;
  exhibition: (where?: ExhibitionWhereInput) => Promise<boolean>;
  room: (where?: RoomWhereInput) => Promise<boolean>;
  show: (where?: ShowWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  asset: (where: AssetWhereUniqueInput) => AssetNullablePromise;
  assets: (args?: {
    where?: AssetWhereInput;
    orderBy?: AssetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Asset>;
  assetsConnection: (args?: {
    where?: AssetWhereInput;
    orderBy?: AssetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AssetConnectionPromise;
  entity: (where: EntityWhereUniqueInput) => EntityNullablePromise;
  entities: (args?: {
    where?: EntityWhereInput;
    orderBy?: EntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Entity>;
  entitiesConnection: (args?: {
    where?: EntityWhereInput;
    orderBy?: EntityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EntityConnectionPromise;
  exhibition: (where: ExhibitionWhereUniqueInput) => ExhibitionNullablePromise;
  exhibitions: (args?: {
    where?: ExhibitionWhereInput;
    orderBy?: ExhibitionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Exhibition>;
  exhibitionsConnection: (args?: {
    where?: ExhibitionWhereInput;
    orderBy?: ExhibitionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ExhibitionConnectionPromise;
  room: (where: RoomWhereUniqueInput) => RoomNullablePromise;
  rooms: (args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Room>;
  roomsConnection: (args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RoomConnectionPromise;
  show: (where: ShowWhereUniqueInput) => ShowNullablePromise;
  shows: (args?: {
    where?: ShowWhereInput;
    orderBy?: ShowOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Show>;
  showsConnection: (args?: {
    where?: ShowWhereInput;
    orderBy?: ShowOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ShowConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAsset: (data: AssetCreateInput) => AssetPromise;
  updateAsset: (args: {
    data: AssetUpdateInput;
    where: AssetWhereUniqueInput;
  }) => AssetPromise;
  updateManyAssets: (args: {
    data: AssetUpdateManyMutationInput;
    where?: AssetWhereInput;
  }) => BatchPayloadPromise;
  upsertAsset: (args: {
    where: AssetWhereUniqueInput;
    create: AssetCreateInput;
    update: AssetUpdateInput;
  }) => AssetPromise;
  deleteAsset: (where: AssetWhereUniqueInput) => AssetPromise;
  deleteManyAssets: (where?: AssetWhereInput) => BatchPayloadPromise;
  createEntity: (data: EntityCreateInput) => EntityPromise;
  updateEntity: (args: {
    data: EntityUpdateInput;
    where: EntityWhereUniqueInput;
  }) => EntityPromise;
  updateManyEntities: (args: {
    data: EntityUpdateManyMutationInput;
    where?: EntityWhereInput;
  }) => BatchPayloadPromise;
  upsertEntity: (args: {
    where: EntityWhereUniqueInput;
    create: EntityCreateInput;
    update: EntityUpdateInput;
  }) => EntityPromise;
  deleteEntity: (where: EntityWhereUniqueInput) => EntityPromise;
  deleteManyEntities: (where?: EntityWhereInput) => BatchPayloadPromise;
  createExhibition: (data: ExhibitionCreateInput) => ExhibitionPromise;
  updateExhibition: (args: {
    data: ExhibitionUpdateInput;
    where: ExhibitionWhereUniqueInput;
  }) => ExhibitionPromise;
  updateManyExhibitions: (args: {
    data: ExhibitionUpdateManyMutationInput;
    where?: ExhibitionWhereInput;
  }) => BatchPayloadPromise;
  upsertExhibition: (args: {
    where: ExhibitionWhereUniqueInput;
    create: ExhibitionCreateInput;
    update: ExhibitionUpdateInput;
  }) => ExhibitionPromise;
  deleteExhibition: (where: ExhibitionWhereUniqueInput) => ExhibitionPromise;
  deleteManyExhibitions: (where?: ExhibitionWhereInput) => BatchPayloadPromise;
  createRoom: (data: RoomCreateInput) => RoomPromise;
  updateRoom: (args: {
    data: RoomUpdateInput;
    where: RoomWhereUniqueInput;
  }) => RoomPromise;
  updateManyRooms: (args: {
    data: RoomUpdateManyMutationInput;
    where?: RoomWhereInput;
  }) => BatchPayloadPromise;
  upsertRoom: (args: {
    where: RoomWhereUniqueInput;
    create: RoomCreateInput;
    update: RoomUpdateInput;
  }) => RoomPromise;
  deleteRoom: (where: RoomWhereUniqueInput) => RoomPromise;
  deleteManyRooms: (where?: RoomWhereInput) => BatchPayloadPromise;
  createShow: (data: ShowCreateInput) => ShowPromise;
  updateShow: (args: {
    data: ShowUpdateInput;
    where: ShowWhereUniqueInput;
  }) => ShowPromise;
  updateManyShows: (args: {
    data: ShowUpdateManyMutationInput;
    where?: ShowWhereInput;
  }) => BatchPayloadPromise;
  upsertShow: (args: {
    where: ShowWhereUniqueInput;
    create: ShowCreateInput;
    update: ShowUpdateInput;
  }) => ShowPromise;
  deleteShow: (where: ShowWhereUniqueInput) => ShowPromise;
  deleteManyShows: (where?: ShowWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  asset: (
    where?: AssetSubscriptionWhereInput
  ) => AssetSubscriptionPayloadSubscription;
  entity: (
    where?: EntitySubscriptionWhereInput
  ) => EntitySubscriptionPayloadSubscription;
  exhibition: (
    where?: ExhibitionSubscriptionWhereInput
  ) => ExhibitionSubscriptionPayloadSubscription;
  room: (
    where?: RoomSubscriptionWhereInput
  ) => RoomSubscriptionPayloadSubscription;
  show: (
    where?: ShowSubscriptionWhereInput
  ) => ShowSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AssetOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "uri_ASC"
  | "uri_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type RoomOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "entryId_ASC"
  | "entryId_DESC"
  | "x_ASC"
  | "x_DESC"
  | "y_ASC"
  | "y_DESC";

export type ShowOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "number_ASC"
  | "number_DESC"
  | "opensAt_ASC"
  | "opensAt_DESC"
  | "closesAt_ASC"
  | "closesAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type EntityOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "handle_ASC"
  | "handle_DESC"
  | "email_ASC"
  | "email_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ExhibitionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "number_ASC"
  | "number_DESC"
  | "theme_ASC"
  | "theme_DESC"
  | "extent_ASC"
  | "extent_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AssetWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AssetWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  uri?: Maybe<String>;
  uri_not?: Maybe<String>;
  uri_in?: Maybe<String[] | String>;
  uri_not_in?: Maybe<String[] | String>;
  uri_lt?: Maybe<String>;
  uri_lte?: Maybe<String>;
  uri_gt?: Maybe<String>;
  uri_gte?: Maybe<String>;
  uri_contains?: Maybe<String>;
  uri_not_contains?: Maybe<String>;
  uri_starts_with?: Maybe<String>;
  uri_not_starts_with?: Maybe<String>;
  uri_ends_with?: Maybe<String>;
  uri_not_ends_with?: Maybe<String>;
  owner?: Maybe<EntityWhereInput>;
  rooms_every?: Maybe<RoomWhereInput>;
  rooms_some?: Maybe<RoomWhereInput>;
  rooms_none?: Maybe<RoomWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AssetWhereInput[] | AssetWhereInput>;
  OR?: Maybe<AssetWhereInput[] | AssetWhereInput>;
  NOT?: Maybe<AssetWhereInput[] | AssetWhereInput>;
}

export interface EntityWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  handle?: Maybe<String>;
  handle_not?: Maybe<String>;
  handle_in?: Maybe<String[] | String>;
  handle_not_in?: Maybe<String[] | String>;
  handle_lt?: Maybe<String>;
  handle_lte?: Maybe<String>;
  handle_gt?: Maybe<String>;
  handle_gte?: Maybe<String>;
  handle_contains?: Maybe<String>;
  handle_not_contains?: Maybe<String>;
  handle_starts_with?: Maybe<String>;
  handle_not_starts_with?: Maybe<String>;
  handle_ends_with?: Maybe<String>;
  handle_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  ownedAssets_every?: Maybe<AssetWhereInput>;
  ownedAssets_some?: Maybe<AssetWhereInput>;
  ownedAssets_none?: Maybe<AssetWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<EntityWhereInput[] | EntityWhereInput>;
  OR?: Maybe<EntityWhereInput[] | EntityWhereInput>;
  NOT?: Maybe<EntityWhereInput[] | EntityWhereInput>;
}

export interface RoomWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  entryId?: Maybe<ID_Input>;
  entryId_not?: Maybe<ID_Input>;
  entryId_in?: Maybe<ID_Input[] | ID_Input>;
  entryId_not_in?: Maybe<ID_Input[] | ID_Input>;
  entryId_lt?: Maybe<ID_Input>;
  entryId_lte?: Maybe<ID_Input>;
  entryId_gt?: Maybe<ID_Input>;
  entryId_gte?: Maybe<ID_Input>;
  entryId_contains?: Maybe<ID_Input>;
  entryId_not_contains?: Maybe<ID_Input>;
  entryId_starts_with?: Maybe<ID_Input>;
  entryId_not_starts_with?: Maybe<ID_Input>;
  entryId_ends_with?: Maybe<ID_Input>;
  entryId_not_ends_with?: Maybe<ID_Input>;
  x?: Maybe<Int>;
  x_not?: Maybe<Int>;
  x_in?: Maybe<Int[] | Int>;
  x_not_in?: Maybe<Int[] | Int>;
  x_lt?: Maybe<Int>;
  x_lte?: Maybe<Int>;
  x_gt?: Maybe<Int>;
  x_gte?: Maybe<Int>;
  y?: Maybe<Int>;
  y_not?: Maybe<Int>;
  y_in?: Maybe<Int[] | Int>;
  y_not_in?: Maybe<Int[] | Int>;
  y_lt?: Maybe<Int>;
  y_lte?: Maybe<Int>;
  y_gt?: Maybe<Int>;
  y_gte?: Maybe<Int>;
  exhibition?: Maybe<ExhibitionWhereInput>;
  asset?: Maybe<AssetWhereInput>;
  AND?: Maybe<RoomWhereInput[] | RoomWhereInput>;
  OR?: Maybe<RoomWhereInput[] | RoomWhereInput>;
  NOT?: Maybe<RoomWhereInput[] | RoomWhereInput>;
}

export interface ExhibitionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  number?: Maybe<Int>;
  number_not?: Maybe<Int>;
  number_in?: Maybe<Int[] | Int>;
  number_not_in?: Maybe<Int[] | Int>;
  number_lt?: Maybe<Int>;
  number_lte?: Maybe<Int>;
  number_gt?: Maybe<Int>;
  number_gte?: Maybe<Int>;
  extent?: Maybe<Int>;
  extent_not?: Maybe<Int>;
  extent_in?: Maybe<Int[] | Int>;
  extent_not_in?: Maybe<Int[] | Int>;
  extent_lt?: Maybe<Int>;
  extent_lte?: Maybe<Int>;
  extent_gt?: Maybe<Int>;
  extent_gte?: Maybe<Int>;
  shows_every?: Maybe<ShowWhereInput>;
  shows_some?: Maybe<ShowWhereInput>;
  shows_none?: Maybe<ShowWhereInput>;
  rooms_every?: Maybe<RoomWhereInput>;
  rooms_some?: Maybe<RoomWhereInput>;
  rooms_none?: Maybe<RoomWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ExhibitionWhereInput[] | ExhibitionWhereInput>;
  OR?: Maybe<ExhibitionWhereInput[] | ExhibitionWhereInput>;
  NOT?: Maybe<ExhibitionWhereInput[] | ExhibitionWhereInput>;
}

export interface ShowWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  number?: Maybe<Int>;
  number_not?: Maybe<Int>;
  number_in?: Maybe<Int[] | Int>;
  number_not_in?: Maybe<Int[] | Int>;
  number_lt?: Maybe<Int>;
  number_lte?: Maybe<Int>;
  number_gt?: Maybe<Int>;
  number_gte?: Maybe<Int>;
  opensAt?: Maybe<DateTimeInput>;
  opensAt_not?: Maybe<DateTimeInput>;
  opensAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  opensAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  opensAt_lt?: Maybe<DateTimeInput>;
  opensAt_lte?: Maybe<DateTimeInput>;
  opensAt_gt?: Maybe<DateTimeInput>;
  opensAt_gte?: Maybe<DateTimeInput>;
  closesAt?: Maybe<DateTimeInput>;
  closesAt_not?: Maybe<DateTimeInput>;
  closesAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  closesAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  closesAt_lt?: Maybe<DateTimeInput>;
  closesAt_lte?: Maybe<DateTimeInput>;
  closesAt_gt?: Maybe<DateTimeInput>;
  closesAt_gte?: Maybe<DateTimeInput>;
  exhibition?: Maybe<ExhibitionWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ShowWhereInput[] | ShowWhereInput>;
  OR?: Maybe<ShowWhereInput[] | ShowWhereInput>;
  NOT?: Maybe<ShowWhereInput[] | ShowWhereInput>;
}

export type EntityWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  handle?: Maybe<String>;
  email?: Maybe<String>;
}>;

export type ExhibitionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  number?: Maybe<Int>;
}>;

export type RoomWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  entryId?: Maybe<ID_Input>;
}>;

export type ShowWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AssetCreateInput {
  id?: Maybe<ID_Input>;
  uri: String;
  owner: EntityCreateOneWithoutOwnedAssetsInput;
  rooms?: Maybe<RoomCreateManyWithoutAssetInput>;
}

export interface EntityCreateOneWithoutOwnedAssetsInput {
  create?: Maybe<EntityCreateWithoutOwnedAssetsInput>;
  connect?: Maybe<EntityWhereUniqueInput>;
}

export interface EntityCreateWithoutOwnedAssetsInput {
  id?: Maybe<ID_Input>;
  handle: String;
  email: String;
}

export interface RoomCreateManyWithoutAssetInput {
  create?: Maybe<RoomCreateWithoutAssetInput[] | RoomCreateWithoutAssetInput>;
  connect?: Maybe<RoomWhereUniqueInput[] | RoomWhereUniqueInput>;
}

export interface RoomCreateWithoutAssetInput {
  id?: Maybe<ID_Input>;
  entryId: ID_Input;
  x: Int;
  y: Int;
  exhibition: ExhibitionCreateOneWithoutRoomsInput;
}

export interface ExhibitionCreateOneWithoutRoomsInput {
  create?: Maybe<ExhibitionCreateWithoutRoomsInput>;
  connect?: Maybe<ExhibitionWhereUniqueInput>;
}

export interface ExhibitionCreateWithoutRoomsInput {
  id?: Maybe<ID_Input>;
  title: String;
  number: Int;
  theme?: Maybe<Json>;
  extent?: Maybe<Int>;
  shows?: Maybe<ShowCreateManyWithoutExhibitionInput>;
}

export interface ShowCreateManyWithoutExhibitionInput {
  create?: Maybe<
    ShowCreateWithoutExhibitionInput[] | ShowCreateWithoutExhibitionInput
  >;
  connect?: Maybe<ShowWhereUniqueInput[] | ShowWhereUniqueInput>;
}

export interface ShowCreateWithoutExhibitionInput {
  id?: Maybe<ID_Input>;
  number: Int;
  opensAt: DateTimeInput;
  closesAt: DateTimeInput;
}

export interface AssetUpdateInput {
  uri?: Maybe<String>;
  owner?: Maybe<EntityUpdateOneRequiredWithoutOwnedAssetsInput>;
  rooms?: Maybe<RoomUpdateManyWithoutAssetInput>;
}

export interface EntityUpdateOneRequiredWithoutOwnedAssetsInput {
  create?: Maybe<EntityCreateWithoutOwnedAssetsInput>;
  update?: Maybe<EntityUpdateWithoutOwnedAssetsDataInput>;
  upsert?: Maybe<EntityUpsertWithoutOwnedAssetsInput>;
  connect?: Maybe<EntityWhereUniqueInput>;
}

export interface EntityUpdateWithoutOwnedAssetsDataInput {
  handle?: Maybe<String>;
  email?: Maybe<String>;
}

export interface EntityUpsertWithoutOwnedAssetsInput {
  update: EntityUpdateWithoutOwnedAssetsDataInput;
  create: EntityCreateWithoutOwnedAssetsInput;
}

export interface RoomUpdateManyWithoutAssetInput {
  create?: Maybe<RoomCreateWithoutAssetInput[] | RoomCreateWithoutAssetInput>;
  delete?: Maybe<RoomWhereUniqueInput[] | RoomWhereUniqueInput>;
  connect?: Maybe<RoomWhereUniqueInput[] | RoomWhereUniqueInput>;
  set?: Maybe<RoomWhereUniqueInput[] | RoomWhereUniqueInput>;
  disconnect?: Maybe<RoomWhereUniqueInput[] | RoomWhereUniqueInput>;
  update?: Maybe<
    | RoomUpdateWithWhereUniqueWithoutAssetInput[]
    | RoomUpdateWithWhereUniqueWithoutAssetInput
  >;
  upsert?: Maybe<
    | RoomUpsertWithWhereUniqueWithoutAssetInput[]
    | RoomUpsertWithWhereUniqueWithoutAssetInput
  >;
  deleteMany?: Maybe<RoomScalarWhereInput[] | RoomScalarWhereInput>;
  updateMany?: Maybe<
    RoomUpdateManyWithWhereNestedInput[] | RoomUpdateManyWithWhereNestedInput
  >;
}

export interface RoomUpdateWithWhereUniqueWithoutAssetInput {
  where: RoomWhereUniqueInput;
  data: RoomUpdateWithoutAssetDataInput;
}

export interface RoomUpdateWithoutAssetDataInput {
  entryId?: Maybe<ID_Input>;
  x?: Maybe<Int>;
  y?: Maybe<Int>;
  exhibition?: Maybe<ExhibitionUpdateOneRequiredWithoutRoomsInput>;
}

export interface ExhibitionUpdateOneRequiredWithoutRoomsInput {
  create?: Maybe<ExhibitionCreateWithoutRoomsInput>;
  update?: Maybe<ExhibitionUpdateWithoutRoomsDataInput>;
  upsert?: Maybe<ExhibitionUpsertWithoutRoomsInput>;
  connect?: Maybe<ExhibitionWhereUniqueInput>;
}

export interface ExhibitionUpdateWithoutRoomsDataInput {
  title?: Maybe<String>;
  number?: Maybe<Int>;
  theme?: Maybe<Json>;
  extent?: Maybe<Int>;
  shows?: Maybe<ShowUpdateManyWithoutExhibitionInput>;
}

export interface ShowUpdateManyWithoutExhibitionInput {
  create?: Maybe<
    ShowCreateWithoutExhibitionInput[] | ShowCreateWithoutExhibitionInput
  >;
  delete?: Maybe<ShowWhereUniqueInput[] | ShowWhereUniqueInput>;
  connect?: Maybe<ShowWhereUniqueInput[] | ShowWhereUniqueInput>;
  set?: Maybe<ShowWhereUniqueInput[] | ShowWhereUniqueInput>;
  disconnect?: Maybe<ShowWhereUniqueInput[] | ShowWhereUniqueInput>;
  update?: Maybe<
    | ShowUpdateWithWhereUniqueWithoutExhibitionInput[]
    | ShowUpdateWithWhereUniqueWithoutExhibitionInput
  >;
  upsert?: Maybe<
    | ShowUpsertWithWhereUniqueWithoutExhibitionInput[]
    | ShowUpsertWithWhereUniqueWithoutExhibitionInput
  >;
  deleteMany?: Maybe<ShowScalarWhereInput[] | ShowScalarWhereInput>;
  updateMany?: Maybe<
    ShowUpdateManyWithWhereNestedInput[] | ShowUpdateManyWithWhereNestedInput
  >;
}

export interface ShowUpdateWithWhereUniqueWithoutExhibitionInput {
  where: ShowWhereUniqueInput;
  data: ShowUpdateWithoutExhibitionDataInput;
}

export interface ShowUpdateWithoutExhibitionDataInput {
  number?: Maybe<Int>;
  opensAt?: Maybe<DateTimeInput>;
  closesAt?: Maybe<DateTimeInput>;
}

export interface ShowUpsertWithWhereUniqueWithoutExhibitionInput {
  where: ShowWhereUniqueInput;
  update: ShowUpdateWithoutExhibitionDataInput;
  create: ShowCreateWithoutExhibitionInput;
}

export interface ShowScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  number?: Maybe<Int>;
  number_not?: Maybe<Int>;
  number_in?: Maybe<Int[] | Int>;
  number_not_in?: Maybe<Int[] | Int>;
  number_lt?: Maybe<Int>;
  number_lte?: Maybe<Int>;
  number_gt?: Maybe<Int>;
  number_gte?: Maybe<Int>;
  opensAt?: Maybe<DateTimeInput>;
  opensAt_not?: Maybe<DateTimeInput>;
  opensAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  opensAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  opensAt_lt?: Maybe<DateTimeInput>;
  opensAt_lte?: Maybe<DateTimeInput>;
  opensAt_gt?: Maybe<DateTimeInput>;
  opensAt_gte?: Maybe<DateTimeInput>;
  closesAt?: Maybe<DateTimeInput>;
  closesAt_not?: Maybe<DateTimeInput>;
  closesAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  closesAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  closesAt_lt?: Maybe<DateTimeInput>;
  closesAt_lte?: Maybe<DateTimeInput>;
  closesAt_gt?: Maybe<DateTimeInput>;
  closesAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ShowScalarWhereInput[] | ShowScalarWhereInput>;
  OR?: Maybe<ShowScalarWhereInput[] | ShowScalarWhereInput>;
  NOT?: Maybe<ShowScalarWhereInput[] | ShowScalarWhereInput>;
}

export interface ShowUpdateManyWithWhereNestedInput {
  where: ShowScalarWhereInput;
  data: ShowUpdateManyDataInput;
}

export interface ShowUpdateManyDataInput {
  number?: Maybe<Int>;
  opensAt?: Maybe<DateTimeInput>;
  closesAt?: Maybe<DateTimeInput>;
}

export interface ExhibitionUpsertWithoutRoomsInput {
  update: ExhibitionUpdateWithoutRoomsDataInput;
  create: ExhibitionCreateWithoutRoomsInput;
}

export interface RoomUpsertWithWhereUniqueWithoutAssetInput {
  where: RoomWhereUniqueInput;
  update: RoomUpdateWithoutAssetDataInput;
  create: RoomCreateWithoutAssetInput;
}

export interface RoomScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  entryId?: Maybe<ID_Input>;
  entryId_not?: Maybe<ID_Input>;
  entryId_in?: Maybe<ID_Input[] | ID_Input>;
  entryId_not_in?: Maybe<ID_Input[] | ID_Input>;
  entryId_lt?: Maybe<ID_Input>;
  entryId_lte?: Maybe<ID_Input>;
  entryId_gt?: Maybe<ID_Input>;
  entryId_gte?: Maybe<ID_Input>;
  entryId_contains?: Maybe<ID_Input>;
  entryId_not_contains?: Maybe<ID_Input>;
  entryId_starts_with?: Maybe<ID_Input>;
  entryId_not_starts_with?: Maybe<ID_Input>;
  entryId_ends_with?: Maybe<ID_Input>;
  entryId_not_ends_with?: Maybe<ID_Input>;
  x?: Maybe<Int>;
  x_not?: Maybe<Int>;
  x_in?: Maybe<Int[] | Int>;
  x_not_in?: Maybe<Int[] | Int>;
  x_lt?: Maybe<Int>;
  x_lte?: Maybe<Int>;
  x_gt?: Maybe<Int>;
  x_gte?: Maybe<Int>;
  y?: Maybe<Int>;
  y_not?: Maybe<Int>;
  y_in?: Maybe<Int[] | Int>;
  y_not_in?: Maybe<Int[] | Int>;
  y_lt?: Maybe<Int>;
  y_lte?: Maybe<Int>;
  y_gt?: Maybe<Int>;
  y_gte?: Maybe<Int>;
  AND?: Maybe<RoomScalarWhereInput[] | RoomScalarWhereInput>;
  OR?: Maybe<RoomScalarWhereInput[] | RoomScalarWhereInput>;
  NOT?: Maybe<RoomScalarWhereInput[] | RoomScalarWhereInput>;
}

export interface RoomUpdateManyWithWhereNestedInput {
  where: RoomScalarWhereInput;
  data: RoomUpdateManyDataInput;
}

export interface RoomUpdateManyDataInput {
  entryId?: Maybe<ID_Input>;
  x?: Maybe<Int>;
  y?: Maybe<Int>;
}

export interface AssetUpdateManyMutationInput {
  uri?: Maybe<String>;
}

export interface EntityCreateInput {
  id?: Maybe<ID_Input>;
  handle: String;
  email: String;
  ownedAssets?: Maybe<AssetCreateManyWithoutOwnerInput>;
}

export interface AssetCreateManyWithoutOwnerInput {
  create?: Maybe<AssetCreateWithoutOwnerInput[] | AssetCreateWithoutOwnerInput>;
  connect?: Maybe<AssetWhereUniqueInput[] | AssetWhereUniqueInput>;
}

export interface AssetCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  uri: String;
  rooms?: Maybe<RoomCreateManyWithoutAssetInput>;
}

export interface EntityUpdateInput {
  handle?: Maybe<String>;
  email?: Maybe<String>;
  ownedAssets?: Maybe<AssetUpdateManyWithoutOwnerInput>;
}

export interface AssetUpdateManyWithoutOwnerInput {
  create?: Maybe<AssetCreateWithoutOwnerInput[] | AssetCreateWithoutOwnerInput>;
  delete?: Maybe<AssetWhereUniqueInput[] | AssetWhereUniqueInput>;
  connect?: Maybe<AssetWhereUniqueInput[] | AssetWhereUniqueInput>;
  set?: Maybe<AssetWhereUniqueInput[] | AssetWhereUniqueInput>;
  disconnect?: Maybe<AssetWhereUniqueInput[] | AssetWhereUniqueInput>;
  update?: Maybe<
    | AssetUpdateWithWhereUniqueWithoutOwnerInput[]
    | AssetUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | AssetUpsertWithWhereUniqueWithoutOwnerInput[]
    | AssetUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<AssetScalarWhereInput[] | AssetScalarWhereInput>;
  updateMany?: Maybe<
    AssetUpdateManyWithWhereNestedInput[] | AssetUpdateManyWithWhereNestedInput
  >;
}

export interface AssetUpdateWithWhereUniqueWithoutOwnerInput {
  where: AssetWhereUniqueInput;
  data: AssetUpdateWithoutOwnerDataInput;
}

export interface AssetUpdateWithoutOwnerDataInput {
  uri?: Maybe<String>;
  rooms?: Maybe<RoomUpdateManyWithoutAssetInput>;
}

export interface AssetUpsertWithWhereUniqueWithoutOwnerInput {
  where: AssetWhereUniqueInput;
  update: AssetUpdateWithoutOwnerDataInput;
  create: AssetCreateWithoutOwnerInput;
}

export interface AssetScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  uri?: Maybe<String>;
  uri_not?: Maybe<String>;
  uri_in?: Maybe<String[] | String>;
  uri_not_in?: Maybe<String[] | String>;
  uri_lt?: Maybe<String>;
  uri_lte?: Maybe<String>;
  uri_gt?: Maybe<String>;
  uri_gte?: Maybe<String>;
  uri_contains?: Maybe<String>;
  uri_not_contains?: Maybe<String>;
  uri_starts_with?: Maybe<String>;
  uri_not_starts_with?: Maybe<String>;
  uri_ends_with?: Maybe<String>;
  uri_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AssetScalarWhereInput[] | AssetScalarWhereInput>;
  OR?: Maybe<AssetScalarWhereInput[] | AssetScalarWhereInput>;
  NOT?: Maybe<AssetScalarWhereInput[] | AssetScalarWhereInput>;
}

export interface AssetUpdateManyWithWhereNestedInput {
  where: AssetScalarWhereInput;
  data: AssetUpdateManyDataInput;
}

export interface AssetUpdateManyDataInput {
  uri?: Maybe<String>;
}

export interface EntityUpdateManyMutationInput {
  handle?: Maybe<String>;
  email?: Maybe<String>;
}

export interface ExhibitionCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  number: Int;
  theme?: Maybe<Json>;
  extent?: Maybe<Int>;
  shows?: Maybe<ShowCreateManyWithoutExhibitionInput>;
  rooms?: Maybe<RoomCreateManyWithoutExhibitionInput>;
}

export interface RoomCreateManyWithoutExhibitionInput {
  create?: Maybe<
    RoomCreateWithoutExhibitionInput[] | RoomCreateWithoutExhibitionInput
  >;
  connect?: Maybe<RoomWhereUniqueInput[] | RoomWhereUniqueInput>;
}

export interface RoomCreateWithoutExhibitionInput {
  id?: Maybe<ID_Input>;
  entryId: ID_Input;
  x: Int;
  y: Int;
  asset: AssetCreateOneWithoutRoomsInput;
}

export interface AssetCreateOneWithoutRoomsInput {
  create?: Maybe<AssetCreateWithoutRoomsInput>;
  connect?: Maybe<AssetWhereUniqueInput>;
}

export interface AssetCreateWithoutRoomsInput {
  id?: Maybe<ID_Input>;
  uri: String;
  owner: EntityCreateOneWithoutOwnedAssetsInput;
}

export interface ExhibitionUpdateInput {
  title?: Maybe<String>;
  number?: Maybe<Int>;
  theme?: Maybe<Json>;
  extent?: Maybe<Int>;
  shows?: Maybe<ShowUpdateManyWithoutExhibitionInput>;
  rooms?: Maybe<RoomUpdateManyWithoutExhibitionInput>;
}

export interface RoomUpdateManyWithoutExhibitionInput {
  create?: Maybe<
    RoomCreateWithoutExhibitionInput[] | RoomCreateWithoutExhibitionInput
  >;
  delete?: Maybe<RoomWhereUniqueInput[] | RoomWhereUniqueInput>;
  connect?: Maybe<RoomWhereUniqueInput[] | RoomWhereUniqueInput>;
  set?: Maybe<RoomWhereUniqueInput[] | RoomWhereUniqueInput>;
  disconnect?: Maybe<RoomWhereUniqueInput[] | RoomWhereUniqueInput>;
  update?: Maybe<
    | RoomUpdateWithWhereUniqueWithoutExhibitionInput[]
    | RoomUpdateWithWhereUniqueWithoutExhibitionInput
  >;
  upsert?: Maybe<
    | RoomUpsertWithWhereUniqueWithoutExhibitionInput[]
    | RoomUpsertWithWhereUniqueWithoutExhibitionInput
  >;
  deleteMany?: Maybe<RoomScalarWhereInput[] | RoomScalarWhereInput>;
  updateMany?: Maybe<
    RoomUpdateManyWithWhereNestedInput[] | RoomUpdateManyWithWhereNestedInput
  >;
}

export interface RoomUpdateWithWhereUniqueWithoutExhibitionInput {
  where: RoomWhereUniqueInput;
  data: RoomUpdateWithoutExhibitionDataInput;
}

export interface RoomUpdateWithoutExhibitionDataInput {
  entryId?: Maybe<ID_Input>;
  x?: Maybe<Int>;
  y?: Maybe<Int>;
  asset?: Maybe<AssetUpdateOneRequiredWithoutRoomsInput>;
}

export interface AssetUpdateOneRequiredWithoutRoomsInput {
  create?: Maybe<AssetCreateWithoutRoomsInput>;
  update?: Maybe<AssetUpdateWithoutRoomsDataInput>;
  upsert?: Maybe<AssetUpsertWithoutRoomsInput>;
  connect?: Maybe<AssetWhereUniqueInput>;
}

export interface AssetUpdateWithoutRoomsDataInput {
  uri?: Maybe<String>;
  owner?: Maybe<EntityUpdateOneRequiredWithoutOwnedAssetsInput>;
}

export interface AssetUpsertWithoutRoomsInput {
  update: AssetUpdateWithoutRoomsDataInput;
  create: AssetCreateWithoutRoomsInput;
}

export interface RoomUpsertWithWhereUniqueWithoutExhibitionInput {
  where: RoomWhereUniqueInput;
  update: RoomUpdateWithoutExhibitionDataInput;
  create: RoomCreateWithoutExhibitionInput;
}

export interface ExhibitionUpdateManyMutationInput {
  title?: Maybe<String>;
  number?: Maybe<Int>;
  theme?: Maybe<Json>;
  extent?: Maybe<Int>;
}

export interface RoomCreateInput {
  id?: Maybe<ID_Input>;
  entryId: ID_Input;
  x: Int;
  y: Int;
  exhibition: ExhibitionCreateOneWithoutRoomsInput;
  asset: AssetCreateOneWithoutRoomsInput;
}

export interface RoomUpdateInput {
  entryId?: Maybe<ID_Input>;
  x?: Maybe<Int>;
  y?: Maybe<Int>;
  exhibition?: Maybe<ExhibitionUpdateOneRequiredWithoutRoomsInput>;
  asset?: Maybe<AssetUpdateOneRequiredWithoutRoomsInput>;
}

export interface RoomUpdateManyMutationInput {
  entryId?: Maybe<ID_Input>;
  x?: Maybe<Int>;
  y?: Maybe<Int>;
}

export interface ShowCreateInput {
  id?: Maybe<ID_Input>;
  number: Int;
  opensAt: DateTimeInput;
  closesAt: DateTimeInput;
  exhibition: ExhibitionCreateOneWithoutShowsInput;
}

export interface ExhibitionCreateOneWithoutShowsInput {
  create?: Maybe<ExhibitionCreateWithoutShowsInput>;
  connect?: Maybe<ExhibitionWhereUniqueInput>;
}

export interface ExhibitionCreateWithoutShowsInput {
  id?: Maybe<ID_Input>;
  title: String;
  number: Int;
  theme?: Maybe<Json>;
  extent?: Maybe<Int>;
  rooms?: Maybe<RoomCreateManyWithoutExhibitionInput>;
}

export interface ShowUpdateInput {
  number?: Maybe<Int>;
  opensAt?: Maybe<DateTimeInput>;
  closesAt?: Maybe<DateTimeInput>;
  exhibition?: Maybe<ExhibitionUpdateOneRequiredWithoutShowsInput>;
}

export interface ExhibitionUpdateOneRequiredWithoutShowsInput {
  create?: Maybe<ExhibitionCreateWithoutShowsInput>;
  update?: Maybe<ExhibitionUpdateWithoutShowsDataInput>;
  upsert?: Maybe<ExhibitionUpsertWithoutShowsInput>;
  connect?: Maybe<ExhibitionWhereUniqueInput>;
}

export interface ExhibitionUpdateWithoutShowsDataInput {
  title?: Maybe<String>;
  number?: Maybe<Int>;
  theme?: Maybe<Json>;
  extent?: Maybe<Int>;
  rooms?: Maybe<RoomUpdateManyWithoutExhibitionInput>;
}

export interface ExhibitionUpsertWithoutShowsInput {
  update: ExhibitionUpdateWithoutShowsDataInput;
  create: ExhibitionCreateWithoutShowsInput;
}

export interface ShowUpdateManyMutationInput {
  number?: Maybe<Int>;
  opensAt?: Maybe<DateTimeInput>;
  closesAt?: Maybe<DateTimeInput>;
}

export interface AssetSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AssetWhereInput>;
  AND?: Maybe<AssetSubscriptionWhereInput[] | AssetSubscriptionWhereInput>;
  OR?: Maybe<AssetSubscriptionWhereInput[] | AssetSubscriptionWhereInput>;
  NOT?: Maybe<AssetSubscriptionWhereInput[] | AssetSubscriptionWhereInput>;
}

export interface EntitySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EntityWhereInput>;
  AND?: Maybe<EntitySubscriptionWhereInput[] | EntitySubscriptionWhereInput>;
  OR?: Maybe<EntitySubscriptionWhereInput[] | EntitySubscriptionWhereInput>;
  NOT?: Maybe<EntitySubscriptionWhereInput[] | EntitySubscriptionWhereInput>;
}

export interface ExhibitionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ExhibitionWhereInput>;
  AND?: Maybe<
    ExhibitionSubscriptionWhereInput[] | ExhibitionSubscriptionWhereInput
  >;
  OR?: Maybe<
    ExhibitionSubscriptionWhereInput[] | ExhibitionSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ExhibitionSubscriptionWhereInput[] | ExhibitionSubscriptionWhereInput
  >;
}

export interface RoomSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RoomWhereInput>;
  AND?: Maybe<RoomSubscriptionWhereInput[] | RoomSubscriptionWhereInput>;
  OR?: Maybe<RoomSubscriptionWhereInput[] | RoomSubscriptionWhereInput>;
  NOT?: Maybe<RoomSubscriptionWhereInput[] | RoomSubscriptionWhereInput>;
}

export interface ShowSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ShowWhereInput>;
  AND?: Maybe<ShowSubscriptionWhereInput[] | ShowSubscriptionWhereInput>;
  OR?: Maybe<ShowSubscriptionWhereInput[] | ShowSubscriptionWhereInput>;
  NOT?: Maybe<ShowSubscriptionWhereInput[] | ShowSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Asset {
  id: ID_Output;
  uri: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface AssetPromise extends Promise<Asset>, Fragmentable {
  id: () => Promise<ID_Output>;
  uri: () => Promise<String>;
  owner: <T = EntityPromise>() => T;
  rooms: <T = FragmentableArray<Room>>(args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AssetSubscription
  extends Promise<AsyncIterator<Asset>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  uri: () => Promise<AsyncIterator<String>>;
  owner: <T = EntitySubscription>() => T;
  rooms: <T = Promise<AsyncIterator<RoomSubscription>>>(args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AssetNullablePromise
  extends Promise<Asset | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  uri: () => Promise<String>;
  owner: <T = EntityPromise>() => T;
  rooms: <T = FragmentableArray<Room>>(args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Entity {
  id: ID_Output;
  handle: String;
  email: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface EntityPromise extends Promise<Entity>, Fragmentable {
  id: () => Promise<ID_Output>;
  handle: () => Promise<String>;
  email: () => Promise<String>;
  ownedAssets: <T = FragmentableArray<Asset>>(args?: {
    where?: AssetWhereInput;
    orderBy?: AssetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface EntitySubscription
  extends Promise<AsyncIterator<Entity>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  handle: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  ownedAssets: <T = Promise<AsyncIterator<AssetSubscription>>>(args?: {
    where?: AssetWhereInput;
    orderBy?: AssetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface EntityNullablePromise
  extends Promise<Entity | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  handle: () => Promise<String>;
  email: () => Promise<String>;
  ownedAssets: <T = FragmentableArray<Asset>>(args?: {
    where?: AssetWhereInput;
    orderBy?: AssetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Room {
  id: ID_Output;
  entryId: ID_Output;
  x: Int;
  y: Int;
}

export interface RoomPromise extends Promise<Room>, Fragmentable {
  id: () => Promise<ID_Output>;
  entryId: () => Promise<ID_Output>;
  x: () => Promise<Int>;
  y: () => Promise<Int>;
  exhibition: <T = ExhibitionPromise>() => T;
  asset: <T = AssetPromise>() => T;
}

export interface RoomSubscription
  extends Promise<AsyncIterator<Room>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  entryId: () => Promise<AsyncIterator<ID_Output>>;
  x: () => Promise<AsyncIterator<Int>>;
  y: () => Promise<AsyncIterator<Int>>;
  exhibition: <T = ExhibitionSubscription>() => T;
  asset: <T = AssetSubscription>() => T;
}

export interface RoomNullablePromise
  extends Promise<Room | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  entryId: () => Promise<ID_Output>;
  x: () => Promise<Int>;
  y: () => Promise<Int>;
  exhibition: <T = ExhibitionPromise>() => T;
  asset: <T = AssetPromise>() => T;
}

export interface Exhibition {
  id: ID_Output;
  title: String;
  number: Int;
  theme?: Json;
  extent: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ExhibitionPromise extends Promise<Exhibition>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  number: () => Promise<Int>;
  theme: () => Promise<Json>;
  extent: () => Promise<Int>;
  shows: <T = FragmentableArray<Show>>(args?: {
    where?: ShowWhereInput;
    orderBy?: ShowOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rooms: <T = FragmentableArray<Room>>(args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ExhibitionSubscription
  extends Promise<AsyncIterator<Exhibition>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  number: () => Promise<AsyncIterator<Int>>;
  theme: () => Promise<AsyncIterator<Json>>;
  extent: () => Promise<AsyncIterator<Int>>;
  shows: <T = Promise<AsyncIterator<ShowSubscription>>>(args?: {
    where?: ShowWhereInput;
    orderBy?: ShowOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rooms: <T = Promise<AsyncIterator<RoomSubscription>>>(args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ExhibitionNullablePromise
  extends Promise<Exhibition | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  number: () => Promise<Int>;
  theme: () => Promise<Json>;
  extent: () => Promise<Int>;
  shows: <T = FragmentableArray<Show>>(args?: {
    where?: ShowWhereInput;
    orderBy?: ShowOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rooms: <T = FragmentableArray<Room>>(args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Show {
  id: ID_Output;
  number: Int;
  opensAt: DateTimeOutput;
  closesAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ShowPromise extends Promise<Show>, Fragmentable {
  id: () => Promise<ID_Output>;
  number: () => Promise<Int>;
  opensAt: () => Promise<DateTimeOutput>;
  closesAt: () => Promise<DateTimeOutput>;
  exhibition: <T = ExhibitionPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ShowSubscription
  extends Promise<AsyncIterator<Show>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  number: () => Promise<AsyncIterator<Int>>;
  opensAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  closesAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  exhibition: <T = ExhibitionSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ShowNullablePromise
  extends Promise<Show | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  number: () => Promise<Int>;
  opensAt: () => Promise<DateTimeOutput>;
  closesAt: () => Promise<DateTimeOutput>;
  exhibition: <T = ExhibitionPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AssetConnection {
  pageInfo: PageInfo;
  edges: AssetEdge[];
}

export interface AssetConnectionPromise
  extends Promise<AssetConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AssetEdge>>() => T;
  aggregate: <T = AggregateAssetPromise>() => T;
}

export interface AssetConnectionSubscription
  extends Promise<AsyncIterator<AssetConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AssetEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAssetSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AssetEdge {
  node: Asset;
  cursor: String;
}

export interface AssetEdgePromise extends Promise<AssetEdge>, Fragmentable {
  node: <T = AssetPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AssetEdgeSubscription
  extends Promise<AsyncIterator<AssetEdge>>,
    Fragmentable {
  node: <T = AssetSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAsset {
  count: Int;
}

export interface AggregateAssetPromise
  extends Promise<AggregateAsset>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAssetSubscription
  extends Promise<AsyncIterator<AggregateAsset>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EntityConnection {
  pageInfo: PageInfo;
  edges: EntityEdge[];
}

export interface EntityConnectionPromise
  extends Promise<EntityConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EntityEdge>>() => T;
  aggregate: <T = AggregateEntityPromise>() => T;
}

export interface EntityConnectionSubscription
  extends Promise<AsyncIterator<EntityConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EntityEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEntitySubscription>() => T;
}

export interface EntityEdge {
  node: Entity;
  cursor: String;
}

export interface EntityEdgePromise extends Promise<EntityEdge>, Fragmentable {
  node: <T = EntityPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EntityEdgeSubscription
  extends Promise<AsyncIterator<EntityEdge>>,
    Fragmentable {
  node: <T = EntitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEntity {
  count: Int;
}

export interface AggregateEntityPromise
  extends Promise<AggregateEntity>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEntitySubscription
  extends Promise<AsyncIterator<AggregateEntity>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ExhibitionConnection {
  pageInfo: PageInfo;
  edges: ExhibitionEdge[];
}

export interface ExhibitionConnectionPromise
  extends Promise<ExhibitionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ExhibitionEdge>>() => T;
  aggregate: <T = AggregateExhibitionPromise>() => T;
}

export interface ExhibitionConnectionSubscription
  extends Promise<AsyncIterator<ExhibitionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ExhibitionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateExhibitionSubscription>() => T;
}

export interface ExhibitionEdge {
  node: Exhibition;
  cursor: String;
}

export interface ExhibitionEdgePromise
  extends Promise<ExhibitionEdge>,
    Fragmentable {
  node: <T = ExhibitionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ExhibitionEdgeSubscription
  extends Promise<AsyncIterator<ExhibitionEdge>>,
    Fragmentable {
  node: <T = ExhibitionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateExhibition {
  count: Int;
}

export interface AggregateExhibitionPromise
  extends Promise<AggregateExhibition>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateExhibitionSubscription
  extends Promise<AsyncIterator<AggregateExhibition>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RoomConnection {
  pageInfo: PageInfo;
  edges: RoomEdge[];
}

export interface RoomConnectionPromise
  extends Promise<RoomConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RoomEdge>>() => T;
  aggregate: <T = AggregateRoomPromise>() => T;
}

export interface RoomConnectionSubscription
  extends Promise<AsyncIterator<RoomConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RoomEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRoomSubscription>() => T;
}

export interface RoomEdge {
  node: Room;
  cursor: String;
}

export interface RoomEdgePromise extends Promise<RoomEdge>, Fragmentable {
  node: <T = RoomPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RoomEdgeSubscription
  extends Promise<AsyncIterator<RoomEdge>>,
    Fragmentable {
  node: <T = RoomSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRoom {
  count: Int;
}

export interface AggregateRoomPromise
  extends Promise<AggregateRoom>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRoomSubscription
  extends Promise<AsyncIterator<AggregateRoom>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ShowConnection {
  pageInfo: PageInfo;
  edges: ShowEdge[];
}

export interface ShowConnectionPromise
  extends Promise<ShowConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ShowEdge>>() => T;
  aggregate: <T = AggregateShowPromise>() => T;
}

export interface ShowConnectionSubscription
  extends Promise<AsyncIterator<ShowConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ShowEdgeSubscription>>>() => T;
  aggregate: <T = AggregateShowSubscription>() => T;
}

export interface ShowEdge {
  node: Show;
  cursor: String;
}

export interface ShowEdgePromise extends Promise<ShowEdge>, Fragmentable {
  node: <T = ShowPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ShowEdgeSubscription
  extends Promise<AsyncIterator<ShowEdge>>,
    Fragmentable {
  node: <T = ShowSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateShow {
  count: Int;
}

export interface AggregateShowPromise
  extends Promise<AggregateShow>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateShowSubscription
  extends Promise<AsyncIterator<AggregateShow>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AssetSubscriptionPayload {
  mutation: MutationType;
  node: Asset;
  updatedFields: String[];
  previousValues: AssetPreviousValues;
}

export interface AssetSubscriptionPayloadPromise
  extends Promise<AssetSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AssetPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AssetPreviousValuesPromise>() => T;
}

export interface AssetSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AssetSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AssetSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AssetPreviousValuesSubscription>() => T;
}

export interface AssetPreviousValues {
  id: ID_Output;
  uri: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface AssetPreviousValuesPromise
  extends Promise<AssetPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  uri: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AssetPreviousValuesSubscription
  extends Promise<AsyncIterator<AssetPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  uri: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface EntitySubscriptionPayload {
  mutation: MutationType;
  node: Entity;
  updatedFields: String[];
  previousValues: EntityPreviousValues;
}

export interface EntitySubscriptionPayloadPromise
  extends Promise<EntitySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EntityPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EntityPreviousValuesPromise>() => T;
}

export interface EntitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EntitySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EntitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EntityPreviousValuesSubscription>() => T;
}

export interface EntityPreviousValues {
  id: ID_Output;
  handle: String;
  email: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface EntityPreviousValuesPromise
  extends Promise<EntityPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  handle: () => Promise<String>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface EntityPreviousValuesSubscription
  extends Promise<AsyncIterator<EntityPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  handle: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ExhibitionSubscriptionPayload {
  mutation: MutationType;
  node: Exhibition;
  updatedFields: String[];
  previousValues: ExhibitionPreviousValues;
}

export interface ExhibitionSubscriptionPayloadPromise
  extends Promise<ExhibitionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ExhibitionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ExhibitionPreviousValuesPromise>() => T;
}

export interface ExhibitionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ExhibitionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ExhibitionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ExhibitionPreviousValuesSubscription>() => T;
}

export interface ExhibitionPreviousValues {
  id: ID_Output;
  title: String;
  number: Int;
  theme?: Json;
  extent: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ExhibitionPreviousValuesPromise
  extends Promise<ExhibitionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  number: () => Promise<Int>;
  theme: () => Promise<Json>;
  extent: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ExhibitionPreviousValuesSubscription
  extends Promise<AsyncIterator<ExhibitionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  number: () => Promise<AsyncIterator<Int>>;
  theme: () => Promise<AsyncIterator<Json>>;
  extent: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RoomSubscriptionPayload {
  mutation: MutationType;
  node: Room;
  updatedFields: String[];
  previousValues: RoomPreviousValues;
}

export interface RoomSubscriptionPayloadPromise
  extends Promise<RoomSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RoomPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RoomPreviousValuesPromise>() => T;
}

export interface RoomSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RoomSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RoomSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RoomPreviousValuesSubscription>() => T;
}

export interface RoomPreviousValues {
  id: ID_Output;
  entryId: ID_Output;
  x: Int;
  y: Int;
}

export interface RoomPreviousValuesPromise
  extends Promise<RoomPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  entryId: () => Promise<ID_Output>;
  x: () => Promise<Int>;
  y: () => Promise<Int>;
}

export interface RoomPreviousValuesSubscription
  extends Promise<AsyncIterator<RoomPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  entryId: () => Promise<AsyncIterator<ID_Output>>;
  x: () => Promise<AsyncIterator<Int>>;
  y: () => Promise<AsyncIterator<Int>>;
}

export interface ShowSubscriptionPayload {
  mutation: MutationType;
  node: Show;
  updatedFields: String[];
  previousValues: ShowPreviousValues;
}

export interface ShowSubscriptionPayloadPromise
  extends Promise<ShowSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ShowPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ShowPreviousValuesPromise>() => T;
}

export interface ShowSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ShowSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ShowSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ShowPreviousValuesSubscription>() => T;
}

export interface ShowPreviousValues {
  id: ID_Output;
  number: Int;
  opensAt: DateTimeOutput;
  closesAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ShowPreviousValuesPromise
  extends Promise<ShowPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  number: () => Promise<Int>;
  opensAt: () => Promise<DateTimeOutput>;
  closesAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ShowPreviousValuesSubscription
  extends Promise<AsyncIterator<ShowPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  number: () => Promise<AsyncIterator<Int>>;
  opensAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  closesAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Json = any;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Entity",
    embedded: false
  },
  {
    name: "Asset",
    embedded: false
  },
  {
    name: "Exhibition",
    embedded: false
  },
  {
    name: "Show",
    embedded: false
  },
  {
    name: "Room",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://gallery-v1-f5f0a401ff.herokuapp.com`
});
export const prisma = new Prisma();
